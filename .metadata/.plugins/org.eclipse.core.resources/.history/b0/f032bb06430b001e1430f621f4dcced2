package com.RailwayReservationAdminManagement.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.RailwayReservationAdminManagement.service.CustomAdminDetailsService;

@Configuration
@Order(1)
public class AdminSecurityConfig extends WebSecurityConfigurerAdapter
{
	
//	@Override
//	  protected void configure(AuthenticationManagerBuilder auth) throws Exception  { 
//		  auth.inMemoryAuthentication()
//		  		.withUser("shreya").password("password").roles("ADMIN"); 
//	  }
//	  
//	  @Override 
//	  protected void configure(HttpSecurity http) throws Exception  {
//		  
//		  http.httpBasic()
//		  .and().authorizeRequests()
//		  	  .antMatchers("/admin/add","/admin/update/**","/admin/delete/**","/admin/all","/admin/").permitAll()
//              //.antMatchers("/admin/all","/admin/").permitAll()
//		  	 // .antMatchers("/v3/api-docs/","/v2/api-docs/","/swagger-resources/**","/swagger-ui/**","/webjars/**").permitAll()
//		  	  .and().csrf().disable().headers().frameOptions().disable(); 
//		 }
//	  
//	  @Bean
//	  public PasswordEncoder getPasswordEncoder() 
//	  { 
//		  return NoOpPasswordEncoder.getInstance(); 
//	  } 
	
	@Bean
    public UserDetailsService userDetailsService() {
        return new CustomAdminDetailsService();
    }
     
    @Bean
    public PasswordEncoder passwordEncoder() {
        return NoOpPasswordEncoder.getInstance();
    }
 
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/").permitAll();
         
        http.antMatcher("/admin/**")
            .authorizeRequests().anyRequest().hasAuthority("ADMIN")
            .and()
            .formLogin()
                .loginPage("/admin/login")
                .usernameParameter("email")
                .loginProcessingUrl("/admin/login")
                .defaultSuccessUrl("/admin/home")
                .permitAll()
            .and()
            .logout()
                .logoutUrl("/admin/logout")
                .logoutSuccessUrl("/");
    }  

}